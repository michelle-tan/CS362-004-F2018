        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <assert.h>
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:#include <string.h>
        -:    5:#include <math.h>
        -:    6:#include "dominion.h"
        -:    7:#include "interface.h"
        -:    8:#include "rngs.h"
        -:    9:#include "myTestUtilities.h"
        -:   10:
        -:   11:
function testGainCard called 6 returned 100% blocks executed 50%
        6:   12:void testGainCard(int supplyPos, int supplyCount, int toFlag, int expectedReturnValue, char* testName){
        6:   13:  int player = 0;
        -:   14:  struct gameState state;
        6:   15:  state.numPlayers = 2;
        6:   16:  state.deckCount[player] = 0;
        6:   17:  state.handCount[player] = 0;
        6:   18:  state.discardCount[player] = 0;
        6:   19:  state.supplyCount[supplyPos] = supplyCount;
        -:   20:
        -:   21:  int returnValue;
        6:   22:  returnValue = gainCard(supplyPos, &state, toFlag, player);
call    0 returned 100%
        -:   23:
        6:   24:  if(returnValue != expectedReturnValue){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   25:    printf("FAILED TEST: %s WITH RETURN VALUE %d (EXPECTED %d)\n", testName, returnValue, expectedReturnValue);
call    0 never executed
    #####:   26:	printState_(&state);
call    0 never executed
    #####:   27:    return;
        -:   28:  }
        -:   29:// if gainCard succeeded
        6:   30:  if(returnValue == 0){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        3:   31:    if(state.supplyCount[supplyPos] != supplyCount-1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   32:      printf("FAILED TEST: %s. supplyCount not decremented.\n", testName);
call    0 never executed
    #####:   33:   	  printState_(&state);
call    0 never executed
    #####:   34:	  return;
        -:   35:    }
        -:   36:  
        3:   37:    if(toFlag == 1){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   38:      if(state.deckCount[player] != 1 && state.deck[player][state.deckCount[state.whoseTurn]-1] != supplyPos){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:   39:        printf("FAILED TEST: %s. player deck not updated correctly.\n", testName);
call    0 never executed
    #####:   40:	    printState_(&state);
call    0 never executed
        -:   41:      }
        1:   42:      return;
        -:   43:    }
        2:   44:    if(toFlag == 2){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   45:   //   if(state.handCount[player] != 1 && state.hand[player][1] != supplyPos){
        1:   46:      if(state.handCount[player] != 1 && state.hand[player][state.handCount[state.whoseTurn]-1] != supplyPos){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:   47:        printf("FAILED TEST: %s. player hand not updated correctly.\n", testName);
call    0 never executed
    #####:   48:    	printState_(&state);
call    0 never executed
        -:   49:      }
        1:   50:      return;
        -:   51:    }
        -:   52:    else{
        -:   53:   //   if(state.discardCount[player] != 1 && state.discard[player][1] != supplyPos){
        1:   54:      if(state.discardCount[player] != 1 && state.discard[player][state.discardCount[state.whoseTurn]-1] != supplyPos){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:   55:        printf("FAILED TEST: %s. player discard not updated correctly.\n", testName);
call    0 never executed
    #####:   56:   	    printState_(&state);
call    0 never executed
        -:   57:      }
        1:   58:      return;
        -:   59:    }
        -:   60:  }
        -:   61:}
        -:   62:
function main called 1 returned 100% blocks executed 100%
        1:   63:int main(){
        -:   64:
        1:   65:  testGainCard(4, 1, 1, 0, "gain the one available copper to the deck");
call    0 returned 100%
        1:   66:  testGainCard(4, 1, 2, 0, "gain the one available copper to the hand");
call    0 returned 100%
        1:   67:  testGainCard(4, 1, 3, 0, "gain the one available copper to the discard");
call    0 returned 100%
        -:   68:
        1:   69:  testGainCard(4, 0, 1, -1, "gain an unavailable copper to the deck");
call    0 returned 100%
        1:   70:  testGainCard(4, 0, 2, -1, "gain an unavailable copper to the hand");
call    0 returned 100%
        1:   71:  testGainCard(4, 0, 3, -1, "gain an unavailable copper to the discard");
call    0 returned 100%
        -:   72:
        -:   73:}
